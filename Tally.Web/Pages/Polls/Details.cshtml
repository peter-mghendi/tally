@page "/polls/{id:int}"
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using Tally.Web.Models
@model Tally.Web.Pages.Polls.Details

@{
    ViewData["Title"] = "Poll Details";
    
    var jsonSerializerSettings = new JsonSerializerSettings
    {
        ContractResolver = new CamelCasePropertyNamesContractResolver(),
        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
        Formatting = Formatting.Indented,
    };
}

<div x-data="details">
    <div x-show="message != null" x-transition class="alert alert-dismissible fade show" :class="`alert-${message?.severity}`" role="alert">
        <strong x-text="message?.title"></strong> <span x-text="message?.body"></span>
        <button type="button" class="btn-close" aria-label="Close" @@click="message = null"></button>
    </div>

    <h1>@ViewData["Title"]</h1>
    
    <div class="d-flex align-items-center justify-content-between mb-3">
        <p class="display-5 text-muted" x-text="poll.question">"@Model.Poll.Question"</p>
        <div>
            <button class="btn btn-outline-primary" :disabled="refreshing" @@click="refresh">
                <span x-show="!refreshing">
                    <i class="bi bi-arrow-repeat"></i>
                    Refresh
                </span>
                <span x-show="refreshing">
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    Refreshing...
                </span>
            </button>
            @* These won't change, they don't need to be reactive. *@
            <a asp-page="./Conclude" class="btn btn-outline-warning @(Model.Poll.EndedAt is null ? null : "disabled" )" asp-route-id="@Model.Poll.Id">
                <i class="bi bi-stop-fill"></i>
                Conclude
            </a>
            <a asp-page="./Delete" class="btn btn-outline-danger" asp-route-id="@Model.Poll.Id">
                <i class="bi bi-trash"></i>
                Delete
            </a>
        </div>
    </div>

    <div class="d-flex justify-content-around mb-5">
        <div class="d-flex flex-column align-items-center py-4">
            <p class="display-3 text-info" x-text="totalVotes"></p>
            <p class="display-6" x-text="totalVotes == 1 ? 'Vote' : 'Votes'"></p>
        </div>
        <div class="vr"></div>
        @* These won't change, they don't need to be reactive. *@
        <div class="d-flex flex-column align-items-center py-4">
            <h2 class="display-3 text-info">@Model.Poll.ChannelPolls.Count</h2>
            <p class="display-6">@(Model.Poll.ChannelPolls.Count == 1 ? "Channel" : "Channels")</p>
        </div>
    </div>

    @* These won't change, they don't need to be reactive. *@
    <div class="row mb-5">
        <div class="col-12 col-md-6">
            <p class="display-6 text-muted mb-3">Overview</p>
            <partial name="Shared/_PollData" model="Model.Poll"/>
        </div>
        <div class="col-12 col-md-6">
            <p class="display-6 text-muted mb-3">Channels</p>
            @foreach (var channel in Enum.GetValues<PollChannel>())
            {
                <div class="form-check mb-3">
                    <input type="checkbox" class="form-check-input" id="platform-telegram" checked="@(Model.Poll.ChannelPolls.Any(cp => cp.Channel == channel) ? "checked" : null)" disabled/>
                    <label for="platform-telegram">@channel.ToString()</label>
                </div>
            }
        </div>
    </div>

    <div class="mb-5">
        <p class="display-6 text-muted mb-3">Live Results</p>
        <table class="table table-borderless table-hover">
            <thead>
            <tr>
                <th scope="col">Channel</th>
                <template x-for="option in optionTotals">
                    <th scope="col" x-text="option.option"></th>
                </template>
            </tr>
            </thead>
            <tbody>
            <template x-for="([channel, option]) in [...results]">
                <tr>
                    <th scope="row">
                        <template x-if="option.live">
                            <div class="spinner-grow spinner-grow-sm text-info me-2" role="status" title="This channel supports live updates. These results are current.">
                                <span class="visually-hidden">Live</span>
                            </div>
                        </template>
                        <template x-if="!option.live">
                            <i class="bi bi-slash-circle-fill text-danger me-2" :title="`This channel does not support live updates. These results were last refreshed at ${option.lastRefreshed}.`"></i>
                        </template>

                        <span x-text="channel" class="text-capitalize"></span>
                    </th>
                    <template x-for="total in option.results">
                        <td x-text="total.votes"></td>
                    </template>
                </tr>
            </template>
            </tbody>
        </table>
    </div>

    <div class="mb-5">
        <p class="display-6 text-muted mb-3">Vote Analysis</p>
        <div class="row mb-5">
            <div class="col-12 col-md-6">
                <canvas id="optionsChart" width="400" height="400"></canvas>
            </div>
            <div class="col-12 col-md-6 d-flex align-items-center py-5">
                <p class="display-6 mx-auto text-center">
                    <span class="text-info" x-text="topOptions.options"></span> <span x-text="topOptions.suffix"></span>
                </p>
            </div>
        </div>
        <div class="row mb-5">
            <div class="col-12 col-md-6 order-md-2">
                <canvas id="channelsChart" width="400" height="400"></canvas>
            </div>
            <div class="col-12 col-md-6 d-flex align-items-center py-5 order-md-1">
                <p class="display-6 mx-auto text-center">
                    <span class="text-info" x-text="topChannels.channels"></span> <span x-text="topChannels.suffix"></span>
                </p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>    
        const initialPoll = @Json.Serialize(Model.Poll, jsonSerializerSettings);
        const initialResults = @Json.Serialize(Model.Results, jsonSerializerSettings);
    </script>
    <script src="~/js/polls/details.g.js"></script>
}