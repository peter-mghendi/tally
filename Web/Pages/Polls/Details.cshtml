@page "{id:int}"
@using System.Collections.Immutable
@using System.Text.Json
@using Web.Models
@model Web.Pages.Polls.Details

@{
    ViewData["Title"] = "Poll Details";

    var channelTotals = Model.Results
        .Select(pair => (Channel: pair.Key, Votes: pair.Value.Sum(r => r.Votes)))
        .OrderByDescending(tuple => tuple.Votes)
        .ToImmutableArray();

    var optionTotalsDict = new Dictionary<int, int>();
    foreach (var channel in Model.Results)
    {
        foreach (var option in channel.Value)
        {
            if (optionTotalsDict.ContainsKey(option.OptionId))
                optionTotalsDict[option.OptionId] += option.Votes;
            else
                optionTotalsDict[option.OptionId] = option.Votes;
        }
    }

    var optionTotals = optionTotalsDict
        .Select(pair => (Option: Model.Poll.Options.Single(o => o.Id == pair.Key).Text, Votes: pair.Value))
        .ToList();
    
    var orderedOptionTotals = optionTotals
        .OrderByDescending(tuple => tuple.Votes)
        .ToImmutableArray();
        
    var totalVotes = channelTotals.Sum(ct => ct.Votes);
}

<h1>@ViewData["Title"]</h1>

<p class="display-5 text-muted mb-3">"@Model.Poll.Question"</p>

<div class="d-flex justify-content-around mb-5">
    <div class="d-flex flex-column align-items-center py-4">
        <p class="display-3 text-info">@totalVotes</p>
        <p class="display-6">Votes</p>
    </div>
    <div class="vr"></div>
    <div class="d-flex flex-column align-items-center py-4">
        <h2 class="display-3 text-info">@Model.Poll.ChannelPolls.Count</h2>
        <p class="display-6">Channels</p>
    </div>
</div>

<div class="row mb-5">
    <p class="display-6">Details</p>
    <div class="col-12 col-md-6">
        <p class="lead">Started At: @Model.Poll.CreatedAt</p>
        <p class="lead">Ended At: @DateTime.Now)</p>
        <p class="lead">Votes: @totalVotes</p>
        <p class="lead">Channels: @Model.Poll.ChannelPolls.Count</p>
    </div>
    <div class="col-12 col-md-6">
        <div class="form-check mb-3">
            <input type="checkbox" class="form-check-input" id="platform-telegram" checked disabled/>
            <label for="platform-telegram">Telegram</label>
        </div>
        <div class="form-check mb-3">
            <input type="checkbox" class="form-check-input" id="platform-twitter" checked disabled/>
            <label for="platform-twitter">Twitter</label>
        </div>
        <div class="form-check mb-3">
            <input type="checkbox" class="form-check-input" id="platform-discord" disabled/>
            <label for="platform-discord">Discord</label>
        </div>
        <div class="form-check mb-3">
            <input type="checkbox" class="form-check-input" id="platform-github" disabled/>
            <label for="platform-github">GitHub</label>
        </div>
        <div class="form-check mb-3">
            <input type="checkbox" class="form-check-input" id="platform-web" disabled/>
            <label for="platform-web">Web</label>
        </div>
    </div>
</div>

<div class="mb-5">
    <p class="display-6 text-muted mb-2">Vote Analysis</p>
    <div class="row mb-2">
        <div class="col-12 col-md-6">
            <canvas id="optionsChart" width="400" height="400"></canvas>
        </div>
        <div class="col-12 col-md-6 d-flex align-items-center">
            <p class="display-6"><span class="text-info">@orderedOptionTotals[0].Option</span> was the most popular option.</p>
        </div>
    </div>
    <div class="row">
        <div class="col-12 col-md-6 d-flex align-items-center">
            <p class="display-6"><span class="text-info">@channelTotals[0].Channel</span> was the most active channel.</p>
        </div>
        <div class="col-12 col-md-6">
            <canvas id="channelsChart" width="400" height="400"></canvas>
        </div>
    </div>
</div>

@section Scripts {
    <script>
    const optionsChartCtx = document.getElementById('optionsChart').getContext('2d');
    const channelsChartCtx = document.getElementById('channelsChart').getContext('2d');
    
    const optionsChart = new Chart(optionsChartCtx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Serialize(optionTotals.Select(t => t.Option))),
            datasets: [{
                label: '# of Votes per Option',
                data: @Html.Raw(Json.Serialize(optionTotals.Select(t => t.Votes))),
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    
    const channelsChart = new Chart(channelsChartCtx, {
         type: 'doughnut',
         data: {
             labels: @Html.Raw(Json.Serialize(channelTotals.Select(t => t.Channel))),
             datasets: [{
               label: '# of Votes per Channel',
               data: @Html.Raw(Json.Serialize(channelTotals.Select(t => t.Votes))),
               backgroundColor: [
                 'rgb(255, 99, 132)',
                 'rgb(54, 162, 235)'
               ],
               hoverOffset: 4
             }]
         },
    });
    </script>
}